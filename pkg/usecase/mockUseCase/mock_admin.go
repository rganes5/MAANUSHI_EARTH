// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/usecase/interface/admin.go

// Package mockUseCase is a generated GoMock package.
package mockUseCase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/rganes5/maanushi_earth_e-commerce/pkg/domain"
	utils "github.com/rganes5/maanushi_earth_e-commerce/pkg/utils"
)

// MockAdminUseCase is a mock of AdminUseCase interface.
type MockAdminUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockAdminUseCaseMockRecorder
}

// MockAdminUseCaseMockRecorder is the mock recorder for MockAdminUseCase.
type MockAdminUseCaseMockRecorder struct {
	mock *MockAdminUseCase
}

// NewMockAdminUseCase creates a new mock instance.
func NewMockAdminUseCase(ctrl *gomock.Controller) *MockAdminUseCase {
	mock := &MockAdminUseCase{ctrl: ctrl}
	mock.recorder = &MockAdminUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminUseCase) EXPECT() *MockAdminUseCaseMockRecorder {
	return m.recorder
}

// AccessHandler mocks base method.
func (m *MockAdminUseCase) AccessHandler(ctx context.Context, id string, access bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessHandler", ctx, id, access)
	ret0, _ := ret[0].(error)
	return ret0
}

// AccessHandler indicates an expected call of AccessHandler.
func (mr *MockAdminUseCaseMockRecorder) AccessHandler(ctx, id, access interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessHandler", reflect.TypeOf((*MockAdminUseCase)(nil).AccessHandler), ctx, id, access)
}

// AddCoupon mocks base method.
func (m *MockAdminUseCase) AddCoupon(ctx context.Context, couponBody utils.BodyAddCoupon) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCoupon", ctx, couponBody)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCoupon indicates an expected call of AddCoupon.
func (mr *MockAdminUseCaseMockRecorder) AddCoupon(ctx, couponBody interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCoupon", reflect.TypeOf((*MockAdminUseCase)(nil).AddCoupon), ctx, couponBody)
}

// Dashboard mocks base method.
func (m *MockAdminUseCase) Dashboard(ctx context.Context) (utils.ResponseWidgets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dashboard", ctx)
	ret0, _ := ret[0].(utils.ResponseWidgets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dashboard indicates an expected call of Dashboard.
func (mr *MockAdminUseCaseMockRecorder) Dashboard(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dashboard", reflect.TypeOf((*MockAdminUseCase)(nil).Dashboard), ctx)
}

// DeleteCoupon mocks base method.
func (m *MockAdminUseCase) DeleteCoupon(ctx context.Context, couponId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCoupon", ctx, couponId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCoupon indicates an expected call of DeleteCoupon.
func (mr *MockAdminUseCaseMockRecorder) DeleteCoupon(ctx, couponId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCoupon", reflect.TypeOf((*MockAdminUseCase)(nil).DeleteCoupon), ctx, couponId)
}

// FindByEmail mocks base method.
func (m *MockAdminUseCase) FindByEmail(ctx context.Context, Email string) (domain.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", ctx, Email)
	ret0, _ := ret[0].(domain.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockAdminUseCaseMockRecorder) FindByEmail(ctx, Email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockAdminUseCase)(nil).FindByEmail), ctx, Email)
}

// GetAllCoupons mocks base method.
func (m *MockAdminUseCase) GetAllCoupons(ctx context.Context, pagination utils.Pagination) ([]domain.Coupon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCoupons", ctx, pagination)
	ret0, _ := ret[0].([]domain.Coupon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCoupons indicates an expected call of GetAllCoupons.
func (mr *MockAdminUseCaseMockRecorder) GetAllCoupons(ctx, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCoupons", reflect.TypeOf((*MockAdminUseCase)(nil).GetAllCoupons), ctx, pagination)
}

// ListUsers mocks base method.
func (m *MockAdminUseCase) ListUsers(ctx context.Context, pagination utils.Pagination) ([]utils.ResponseUsers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx, pagination)
	ret0, _ := ret[0].([]utils.ResponseUsers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockAdminUseCaseMockRecorder) ListUsers(ctx, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockAdminUseCase)(nil).ListUsers), ctx, pagination)
}

// SalesReport mocks base method.
func (m *MockAdminUseCase) SalesReport(arg0 utils.SalesReport) ([]utils.ResponseSalesReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SalesReport", arg0)
	ret0, _ := ret[0].([]utils.ResponseSalesReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SalesReport indicates an expected call of SalesReport.
func (mr *MockAdminUseCaseMockRecorder) SalesReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SalesReport", reflect.TypeOf((*MockAdminUseCase)(nil).SalesReport), arg0)
}

// SignUpAdmin mocks base method.
func (m *MockAdminUseCase) SignUpAdmin(ctx context.Context, body utils.AdminSignUp) (domain.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUpAdmin", ctx, body)
	ret0, _ := ret[0].(domain.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUpAdmin indicates an expected call of SignUpAdmin.
func (mr *MockAdminUseCaseMockRecorder) SignUpAdmin(ctx, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUpAdmin", reflect.TypeOf((*MockAdminUseCase)(nil).SignUpAdmin), ctx, body)
}

// UpdateCoupon mocks base method.
func (m *MockAdminUseCase) UpdateCoupon(ctx context.Context, couponBody utils.BodyAddCoupon, couponId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCoupon", ctx, couponBody, couponId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCoupon indicates an expected call of UpdateCoupon.
func (mr *MockAdminUseCaseMockRecorder) UpdateCoupon(ctx, couponBody, couponId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCoupon", reflect.TypeOf((*MockAdminUseCase)(nil).UpdateCoupon), ctx, couponBody, couponId)
}
